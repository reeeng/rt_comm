@using RTComm.Data
@using RTComm.Services
@inject IJobService JobService
@inject IJSRuntime jsRuntime
@inject IClientService ClientService
@page "/jobs"
<h3>JobPage</h3>


@if (jobList == null)
{
    <p><em>No Jobs at the moment...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Id</th>
                <th>Description</th>
                <th>Cost</th>
                <th>Job Address</th>
                <th>Start Date</th>
                <th>End Date</th>


            </tr>
        </thead>
        <tbody>
            @foreach (var jobItem in jobList)
            {
            <tr>
                <td>@jobItem.Name</td>
                <td>@jobItem.Id</td>
                <td>@jobItem.Description</td>
                <td>@jobItem.Cost</td>
                <td>@jobItem.JobAddress</td>
                <td>@jobItem.CreatedDate</td>

                <td>@jobItem.EndDate</td>
                <td><input type="button" class="btn btn-primary" @onclick="(() => PrepareForEdit(jobItem))" data-toggle="modal" data-target="#jobModal" value="Edit" /></td>
                <td><input type="button" class="btn btn-danger" @onclick="(() => PrepareForDelete(jobItem))" data-toggle="modal" data-target="#confirmDeleteModal" value="Delete" /></td>
            </tr>
            }
        </tbody>
    </table>
}


<div>
    <input type="button" data-toggle="modal" data-target="#jobModal" class="btn btn-primary" value="Add Job" @onclick="(() => InitializeJobObject())" />
</div>

<ClientDelete OnClick="@Delete" />
<JobAdd JobObject="jobObject" DataChanged="@DataChanged"><CustomHeader>@customHeader</CustomHeader></JobAdd>


@code {

    List<Jobs> jobList; //list of all entries in job table
    Jobs jobObject = new Jobs();//new object of type jobs to pass to add and delete jobs
    string customHeader = string.Empty;//custom header variable to be used in custom header function
    List<Client> clientList;

    protected override async Task OnInitializedAsync() //fetch all clients function
    
    {
        jobList = await JobService.Get();
    
        

    

    }
    private void InitializeJobObject() //create a new job function - triggered with add job btn
    {
        jobObject = new Jobs();
        customHeader = "Add New Job";//will be custom header value of popup if add jobs button clicked

    }
    private async void DataChanged()//auto refresh the page..state has changed is for refreshing if it detects change
    {
        jobList = await JobService.Get();//fetch from DB
        StateHasChanged();

    }

    private void PrepareForEdit(Jobs job)
    {
        jobObject = job;
        customHeader = "Edit Job";
    }

    private void PrepareForDelete(Jobs job)
    {
        jobObject = job;
    }
    private async Task Delete()
    {
        var task = await JobService.Delete(jobObject);
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        jobList = await JobService.Get();
        jobObject = new Jobs();
    }

}
